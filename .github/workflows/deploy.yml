name: "Terraform action"
on:
  push:
    branches:    
      - '**'
    tags-ignore:
      - '**'
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
  GITHUB_BRANCH_NAME: ${{ github.ref_name }}
  AWS_TF_ROLE: ${{ secrets.AWS_TF_ROLE }}

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .aws/terraform
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set ENV variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Using QA Role"
            echo "AWS_ROLE=${{ secrets.AWS_QA_ROLE }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "Using Test Role"
            echo "AWS_ROLE=${{ secrets.AWS_TEST_ROLE }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/feature/* || $GITHUB_REF == refs/heads/bugfix/* || $GITHUB_REF == refs/heads/task/* || $GITHUB_REF == refs/heads/hotfix/* ]]; then
            echo "Using Dev Role"
            echo "AWS_ROLE=${{ secrets.AWS_DEV_ROLE }}" >> $GITHUB_ENV
          else
            echo "Invalid branch name. Stopping the action."
            exit 1
          fi

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      # - name: Debug AWS CLI
      #   run: |
      #     aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Assume role in Account B for terraform init
        run: |
          # Assume the role in Account B for terraform init
          assume_role_output=$(aws sts assume-role \
            --role-arn arn:aws:iam::590183831246:role/github-actions-tf-mgmt-role \
            --role-session-name GitHubActionsInit)

          export AWS_ACCESS_KEY_ID=$(echo $assume_role_output | jq -r .Credentials.AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $assume_role_output | jq -r .Credentials.SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $assume_role_output | jq -r .Credentials.SessionToken)

          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="workspace_key_prefix=${REPO_NAME}"


      # - name: Debug AWS CLI Configuration (Account B)
      #   run: |
      #     aws configure list
      #     aws sts get-caller-identity

      # - name: Terraform Init
      #   id: init
      #   run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="workspace_key_prefix=${REPO_NAME}"

      # - name: Terraform Workspaces
      #   id: workspaces
      #   run: |
      #     chmod +x ../../.github/workflows/utils/workspaces.sh
      #     source ../../.github/workflows/utils/workspaces.sh $GITHUB_BRANCH_NAME

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  # apply:
  #   needs: plan
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: .aws/terraform
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3

  #     - name: Set ENV variables
  #       run: |
  #         echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
  #         if [[ $GITHUB_REF == refs/heads/main ]]; then
  #           echo "AWS_ROLE=${{ secrets.AWS_QA_ROLE }}" >> $GITHUB_ENV
  #         elif [[ $GITHUB_REF == refs/heads/develop ]]; then
  #           echo "AWS_ROLE=${{ secrets.AWS_TEST_ROLE }}" >> $GITHUB_ENV
  #         elif [[ $GITHUB_REF == refs/heads/feature/* || $GITHUB_REF == refs/heads/bugfix/* || $GITHUB_REF == refs/heads/task/* || $GITHUB_REF == refs/heads/hotfix/* ]]; then
  #           echo "AWS_ROLE=${{ secrets.AWS_DEV_ROLE }}" >> $GITHUB_ENV
  #         else
  #           echo "Invalid branch name. Stopping the action."
  #           exit 1
  #         fi

  #     - name: Configure AWS credentials from AWS account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ env.AWS_ROLE }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         role-session-name: GitHub-OIDC-TERRAFORM

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.2.5

  #     - name: Terraform Init
  #       id: init
  #       env:
  #         AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  #         AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
  #       run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="workspace_key_prefix=${REPO_NAME}"

  #     - name: Terraform Workspaces
  #       id: workspaces
  #       env:
  #         GITHUB_BRANCH_NAME: ${{ github.ref_name }}
  #       run: |
  #         # cd ../../.github/workflows/utils
  #         chmod +x ../../.github/workflows/utils/workspaces.sh
  #         source ../../.github/workflows/utils/workspaces.sh $GITHUB_BRANCH_NAME

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve -input=false